{
  "rules": {
    "users": {
      "$uid": {
        ".read": "auth !== null && $uid === auth.uid",
        ".write": "auth !== null && $uid === auth.uid",
        "fullname": {
          ".read": true
        },
        "img_url": {
          ".read": true
        },
        "email": {
          ".read": true
        },
        "shared_documents": {
          "$id": {
            ".write": "auth !== null && root.child('docs/' + $id + '/roles/' + auth.uid).val() === 'owner'"
          }
        }
      }
    },
    /*
     * Currently there exists only three roles: Owner, Editor, and Viewer.
     */
    "docs": {
      "$id": {
        ".read": "data.child('public').val() === true || (auth !== null && data.child('roles').hasChild(auth.uid))",
        //".write": "auth !== null && (!data.exists() || (data.child('roles').child(auth.uid).val() === 'owner'))",
        ".write": "auth !== null && (!data.exists() || (data.child('roles').child(auth.uid).val() === 'owner' && !newData.exists()))",
        "title": {
          ".write": "auth !== null && data.parent().child('roles').hasChild(auth.uid) && data.parent().child('roles').child(auth.uid).val() !== 'viewer'",
          ".validate": "newData.isString()"
        },
        "timestamp": {
          ".write": "auth !== null && data.parent().child('roles').child(auth.uid).val() !== 'viewer'",
          ".validate": "newData.val() === now"
        },
        "roles": {
          ".write": "auth !== null && data.child(auth.uid).val() === 'owner'",
          "$userid": {
            ".validate": "root.child('users').hasChild($userid) && (newData.val() === 'owner' || newData.val() === 'editor' || newData.val() === 'viewer')"
          }
        },
        "public": {
          ".write": "auth !== null && root.child('docs/' + $id + '/roles/' + auth.uid).val() === 'owner'",
          ".validate": "newData.isBoolean()"
        },

        // Based on https://github.com/FirebaseExtended/firepad/blob/master/examples/security/validate-auth.json
        "history": {
          "$revision": {
            /* Allow writing a revision as long as it doesn't already exist and  you write your auth.uid as the 'a' field. */
            ".write": "!data.exists() && auth !== null && root.child('docs/' + $id + '/roles/' + auth.uid).val() !== 'viewer' && newData.child('a').val() === auth.uid"
          }
        },
        "users": {
          "$userid": {
            /* You may freely modify your own user info. */
            ".write": "auth !== null && data.parent().parent().child('roles').hasChild(auth.uid) && $userid === auth.uid"
          }
        },
        "checkpoint": {
          /* You may write a checkpoint as long as you're writing your auth.uid as the 'a' field and you
             also wrote the revision that you're checkpointing. */
          ".write": "auth !== null && root.child('docs/' + $id + '/roles/' + auth.uid).val() !== 'viewer' && newData.child('a').val() === auth.uid && root.child('docs/' + $id + '/history').child(newData.child('id').val()).child('a').val() === auth.uid"
        },
        "tags": {
          ".write": "auth !== null && data.parent().child('roles').hasChild(auth.uid) && data.parent().child('roles').child(auth.uid).val() !== 'viewer'",
          "$tagID": {
            ".validate": "newData.isString()"
          }
        },
        "images": {
          "$imageID": {
	          ".write": "auth !== null && data.parent().parent().child('roles').hasChild(auth.uid) && (data.parent().parent().child('roles').child(auth.uid).val() === 'owner' || (data.parent().parent().child('roles').child(auth.uid).val() !== 'viewer' && !data.exists()))",
            ".validate": "newData.isBoolean()"
          }
        }
      }
    },
    "email_to_uid": {
      "$email": {
        ".read": true,
        ".write": "auth !== null && auth.token.email.replace('.', ',') === $email",
        ".validate": "newData.val() === auth.uid"
      }
    },
    // Only for testing purposes. Will be removed later.
    "debug_doc": {
      ".read": true,
      ".write": true
    },
    "img_names": {
      ".read": true,
      ".write": true
    }
  }
}
